<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++实现多维数组</title>
    <url>/posts/21798/</url>
    <content><![CDATA[<p>在Visual Studio 2010的版本上想要使用多维数组实现一个算法，但是，无奈<code>boost</code>提供的<code>multi_array</code>坑太多，在多维数组降维赋值时经常发生错误，<code>eigen</code>提供的只有二维矩阵，最新版本中有<code>tensor</code>，但在目前的产品代码库里用不了，opencv？太大。。。最后还是自己实现了一个，拿出来，抛砖引玉吧。</p>
<a id="more"></a>

<p>这里用到了<code>C++11</code>列表初始化；如果你的编译器比较旧（没错，我用的就是vs2010），可以使用C语言的<code>stdarg.h</code>进行不定参数解析，当然这里也有些小坑。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="comment">// custom_multi_array.hpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> Dims&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiArray</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	MultiArray() : mTotalDimCnt(<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">memset</span>(mDimCnt, <span class="number">0</span>, <span class="keyword">sizeof</span>(T)*Dims);</span><br><span class="line">	&#125;</span><br><span class="line">	MultiArray(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt; &amp;dimCnt) : mTotalDimCnt(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		SetMemberVariable(dimCnt);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Reset</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt; &amp;dimCnt)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		mTotalDimCnt = <span class="number">1</span>;</span><br><span class="line">		SetMemberVariable(dimCnt);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">size_t</span> <span class="title">GetDimCnt</span><span class="params">(<span class="keyword">size_t</span> dimIdx)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (dimIdx &lt; Dims)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> mDimCnt[dimIdx];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">size_t</span> <span class="title">GetTotalDimCnt</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> mTotalDimCnt;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">T *<span class="title">Get</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (mContent.empty())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> &amp;mContent[<span class="number">0</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">const</span> T *<span class="title">Get</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (mContent.empty())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> &amp;mContent[<span class="number">0</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">T &amp;<span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt; &amp;args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">try</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">size_t</span> idx = GetIndex(args);</span><br><span class="line">			<span class="keyword">return</span> mContent[idx];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (<span class="keyword">const</span> <span class="built_in">std</span>::exception&amp;e)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="built_in">std</span>::invalid_argument(e.what());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">const</span> T &amp;<span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt; &amp;args)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">try</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">size_t</span> idx = GetIndex(args);</span><br><span class="line">			<span class="keyword">return</span> mContent[idx];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (<span class="keyword">const</span> <span class="built_in">std</span>::exception&amp;e)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="built_in">std</span>::invalid_argument(e.what());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/// Copy constructor</span></span><br><span class="line">	MultiArray&lt;T, Dims&gt;(<span class="keyword">const</span> MultiArray&lt;T, Dims&gt; &amp;lhs)</span><br><span class="line">	&#123;</span><br><span class="line">		mTotalDimCnt = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; Dims; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			mDimCnt[i] = lhs.mDimCnt[i];</span><br><span class="line">			mTotalDimCnt *= mDimCnt[i];</span><br><span class="line">		&#125;</span><br><span class="line">		mContent = lhs.mContent;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/// Assignment constructor</span></span><br><span class="line">	MultiArray&lt;T, Dims&gt; &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> MultiArray&lt;T, Dims&gt; &amp;lhs)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; Dims; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			mDimCnt[i] = lhs.mDimCnt[i];</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (lhs.mTotalDimCnt != mTotalDimCnt)</span><br><span class="line">		&#123;</span><br><span class="line">			mTotalDimCnt = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; Dims; i++)</span><br><span class="line">			&#123;</span><br><span class="line">				mTotalDimCnt *= mDimCnt[i];</span><br><span class="line">			&#125;</span><br><span class="line">			mContent.resize(mTotalDimCnt);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">std</span>::copy(lhs.mContent.<span class="built_in">begin</span>(), lhs.mContent.<span class="built_in">end</span>(), mContent.<span class="built_in">begin</span>());</span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">SetMemberVariable</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt; &amp;dimCnt)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> exceptionPrefix = <span class="string">"GetIndex Exception! "</span>;</span><br><span class="line">		<span class="keyword">if</span> (dimCnt.<span class="built_in">size</span>() == Dims)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; Dims; i++)</span><br><span class="line">			&#123;</span><br><span class="line">				mDimCnt[i] = dimCnt[i];</span><br><span class="line">				mTotalDimCnt *= mDimCnt[i];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (mTotalDimCnt &gt; <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				mContent.resize(mTotalDimCnt, <span class="number">0</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="built_in">std</span>::invalid_argument(exceptionPrefix + <span class="string">"Dimension count error (equal 0)!"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="built_in">std</span>::invalid_argument(exceptionPrefix + <span class="string">"Dimension count size error!"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">size_t</span> <span class="title">GetIndex</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt; &amp;args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> exceptionPrefix = <span class="string">"GetIndex Exception! "</span>;</span><br><span class="line">		<span class="comment">/// Parameters check</span></span><br><span class="line">		<span class="keyword">if</span> (args.<span class="built_in">size</span>() &gt; Dims || args.empty())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="built_in">std</span>::invalid_argument(exceptionPrefix + <span class="string">"Dimension count size error!"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">/// Assign to local variable</span></span><br><span class="line">		<span class="keyword">size_t</span> dimCnt[Dims] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; args.<span class="built_in">size</span>(); i++)</span><br><span class="line">		&#123;</span><br><span class="line">			dimCnt[i] = args[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">/// Get current index from args</span></span><br><span class="line">		<span class="keyword">size_t</span> idx = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; Dims; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (dimCnt[i] &gt;= mDimCnt[i])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="built_in">std</span>::invalid_argument(exceptionPrefix + <span class="string">"Dimension count error!"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// Get current index corresponding element count</span></span><br><span class="line">			<span class="keyword">size_t</span>  t = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">size_t</span> j = i + <span class="number">1</span>; j &lt; Dims; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				t *= mDimCnt[j];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// Updata index</span></span><br><span class="line">			idx += (t * dimCnt[i]);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> idx;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">size_t</span>         mDimCnt[Dims];</span><br><span class="line">	<span class="keyword">size_t</span>         mTotalDimCnt;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt; mContent;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>主函数，简单的测试和调用示例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"custom_multi_array.hpp"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// main.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	&#123; <span class="comment">/// 构造函数</span></span><br><span class="line">		<span class="keyword">try</span></span><br><span class="line">		&#123;</span><br><span class="line">			MultiArray&lt;float, 2&gt; mat2d1(&#123; 1 &#125;);</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Construct success"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (<span class="keyword">const</span> <span class="built_in">std</span>::exception&amp; e)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">try</span></span><br><span class="line">		&#123;</span><br><span class="line">			MultiArray&lt;float, 2&gt; mat2d1(&#123; 1, 0 &#125;);</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Construct success"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (<span class="keyword">const</span> <span class="built_in">std</span>::exception&amp; e)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">try</span></span><br><span class="line">		&#123;</span><br><span class="line">			MultiArray&lt;float, 2&gt; mat2d1(&#123; 1, 1, 1 &#125;);</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Construct success"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (<span class="keyword">const</span> <span class="built_in">std</span>::exception&amp; e)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">try</span></span><br><span class="line">		&#123;</span><br><span class="line">			MultiArray&lt;float, 2&gt; mat2d1(&#123; 1, 1 &#125;);</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Construct success"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (<span class="keyword">const</span> <span class="built_in">std</span>::exception&amp; e)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	&#123; <span class="comment">/// 复制，赋值构造函数</span></span><br><span class="line">		MultiArray&lt;float, 2&gt; mat2d1(&#123; 18, 2 &#125;);</span><br><span class="line">		MultiArray&lt;<span class="keyword">float</span>, <span class="number">2</span>&gt; mat2d2;</span><br><span class="line">		MultiArray&lt;float, 2&gt; mat2d3(&#123; 18, 2 &#125;);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/// 复制构造函数</span></span><br><span class="line">		MultiArray&lt;float, 2&gt; mat2d4(mat2d1);</span><br><span class="line">		<span class="comment">/// 赋值构造函数</span></span><br><span class="line">		mat2d2 = mat2d1; <span class="comment">// 大小不等</span></span><br><span class="line">		mat2d3 = mat2d1; <span class="comment">// 大小相等</span></span><br><span class="line">	&#125;</span><br><span class="line">	&#123; <span class="comment">/// 不同维度的赋值</span></span><br><span class="line">		MultiArray&lt;float, 3&gt; mat3d(&#123; 12, 18, 2 &#125;);</span><br><span class="line">		MultiArray&lt;float, 2&gt; mat2d(&#123; 18, 2 &#125;);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">memcpy</span>(mat2d.Get(), &amp;mat3d(&#123; <span class="number">5</span> &#125;), <span class="number">18</span> * <span class="number">2</span> * <span class="keyword">sizeof</span>(<span class="keyword">float</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	&#123; <span class="comment">/// 遍历输出</span></span><br><span class="line">		MultiArray&lt;float, 2&gt; mat2d(&#123; 18, 2 &#125;);</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; <span class="title">vec</span><span class="params">(<span class="number">18</span> * <span class="number">2</span>)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">18</span>*<span class="number">2</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			vec[i] = i * <span class="number">1.0f</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">memcpy</span>(mat2d.Get(), &amp;vec[<span class="number">0</span>], <span class="number">18</span> * <span class="number">2</span> * <span class="keyword">sizeof</span>(<span class="keyword">float</span>));</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; mat2d.GetDimCnt(<span class="number">0</span>); i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j &lt; mat2d.GetDimCnt(<span class="number">1</span>); j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; mat2d(&#123; i, j &#125;) &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>CPP</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习基础</title>
    <url>/posts/3233011741/</url>
    <content><![CDATA[<p>深度学习所用到的数学知识并没有特别高深，其中最重要的是损失函数，梯度下降和激活函数。</p>
<a id="more"></a>

<h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p>损失函数使用来估量模型和预测值和真实值之间的不一样程度，它是一个非负的实数。损失函数的值越小，表示模型越好。</p>
<h3 id="均方差损失函数"><a href="#均方差损失函数" class="headerlink" title="均方差损失函数"></a>均方差损失函数</h3><p>$$<br>MSE =<br>$$</p>
<h3 id="绝对误差"><a href="#绝对误差" class="headerlink" title="绝对误差"></a>绝对误差</h3><p>$$<br>MAE=<br>$$</p>
<h3 id="交叉熵损失函数"><a href="#交叉熵损失函数" class="headerlink" title="交叉熵损失函数"></a>交叉熵损失函数</h3><p>概率估计上定义，</p>
<h2 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h2><h3 id="SGD"><a href="#SGD" class="headerlink" title="SGD"></a>SGD</h3><h3 id="RMSProp"><a href="#RMSProp" class="headerlink" title="RMSProp"></a>RMSProp</h3><h3 id="Adam"><a href="#Adam" class="headerlink" title="Adam"></a>Adam</h3><h2 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h2><p>在神经网络的计算过程中，每层都相当于一个矩阵相乘，所以无论多少层的神经网络都是输入的线性组合。所以需要激活函数来引入非线性的因素，使得神经网络可以逼近任何非线性函数，增加模型的泛化特性。</p>
<h3 id="sigmoid"><a href="#sigmoid" class="headerlink" title="sigmoid"></a>sigmoid</h3><p>$$<br>s(x) = \frac{1}{1 + {e}^{-x}}<br>$$</p>
<p>导数为：<br>$$<br>\frac {\partial s(x)}{\partial x} = s(x)(1-s(x))<br>$$</p>
<ul>
<li>sigmoid需要进行指数运算，因此计算速度比较慢</li>
<li><em>函数的输出不是以0为中心，这样会使权重更新效率降低（Why？）</em>，<a href="https://liam.page/2018/04/17/zero-centered-active-function/" target="_blank" rel="noopener">参考</a></li>
</ul>
<p>更新效率即指函数的收敛速度，迭代次数越多，说明模型的收敛速度越慢；反之，迭代次数少，则表明收敛速度快。</p>
<p>深度学习的一般方法即方向传播，即链式法则。<br>$$<br>w \leftarrow w - \eta \frac {\partial L}{\partial w}<br>$$<br>对某一个神经元，其输入输出关系是<br>$$<br>f(\vec x;\vec w, b) = f(\sum w_i x_i + b)<br>$$<br>因此，对某一个参数$w_i$来说<br>$$<br>\frac {\partial L}{\partial w_i} = \frac {\partial L}{\partial f} \frac {\partial f}{\partial z} \frac {\partial z}{\partial w_i} = x_i \frac {\partial L}{\partial f} \frac {\partial f}{\partial z}<br>$$<br>因此，对于某一个参数，其更新过程为<br>$$<br>w_i \leftarrow w_i - \eta \frac {\partial L}{\partial w_i} = w_i - \eta x_i \frac {\partial L}{\partial f} \frac {\partial f}{\partial z}<br>$$</p>
<p>参数$w_i$的实际更新方向由$\frac {\partial L}{\partial f} \frac {\partial f}{\partial z}$决定。另外，从上式也可以看出对于任意一个$w_i$，$\frac {\partial L}{\partial f} \frac {\partial f}{\partial z}$都是常数，所以各个$w_i$更新方向的差异，完全由输入值$x_i$决定。</p>
<p><strong>以零为中心的影响：</strong></p>
<p>以二维输入为例<br>$$<br>f(\vec x;\vec w, b) = f(w_0 x_0 + w_1 x_1 + b)<br>$$<br>现在假设参数$w_0$，$w_1$的最优解是${\hat w}_0$，${\hat w}_1$，且满足条件<br>$$<br>w_0 \lt {\hat w}_0, w_1 \ge {\hat w}_1<br>$$<br>这说明，$w_0$希望增大，而$w_1$需要适当减小。因此要求$x_0$和$x_1$的符号相反，但是在sigmoid函数中，输出值始终未正。这也就是说，如果上一级神经元采用sigmoid函数作为激活函数，那么我们总无法做到$x_0$和$x_1$符号相反。</p>
<h3 id="tanh"><a href="#tanh" class="headerlink" title="tanh"></a>tanh</h3><h3 id="relu"><a href="#relu" class="headerlink" title="relu"></a>relu</h3><h3 id="leaky-relu"><a href="#leaky-relu" class="headerlink" title="leaky relu"></a>leaky relu</h3>]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>PyTorch</tag>
        <tag>深度学习基础</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub Pages搭建个人博客</title>
    <url>/posts/9414/</url>
    <content><![CDATA[<p>使用GitHub搭建个人博客的过程虽然简单，但是期间还是踩过了一些坑，这里简单的记录一下配置的过程，以方便查找。</p>
<a id="more"></a>

<h2 id="GitHub-Pages初始化"><a href="#GitHub-Pages初始化" class="headerlink" title="GitHub Pages初始化"></a>GitHub Pages初始化</h2><h3 id="创建个人的GitHub账号"><a href="#创建个人的GitHub账号" class="headerlink" title="创建个人的GitHub账号"></a>创建个人的GitHub账号</h3><p>如用户名：<code>zhangsan</code></p>
<h3 id="在GitHub账号里新建一个和账号用户名同名的管理仓"><a href="#在GitHub账号里新建一个和账号用户名同名的管理仓" class="headerlink" title="在GitHub账号里新建一个和账号用户名同名的管理仓"></a>在GitHub账号里新建一个和账号用户名同名的管理仓</h3><p>如：<code>zhangsan.github.io</code></p>
<h3 id="设置该仓为GitHub-Page仓"><a href="#设置该仓为GitHub-Page仓" class="headerlink" title="设置该仓为GitHub Page仓"></a>设置该仓为GitHub Page仓</h3><p>步骤如下：</p>
<ul>
<li><p>在软件仓的主页面点击<code>Setting</code></p>
</li>
<li><p>找到<code>GitHub Pages</code>，点击<code>Choose a theme</code></p>
</li>
<li><p>然后随便选择一个主题，并对更改进行<code>commit</code></p>
</li>
</ul>
<h3 id="在浏览器中输入https-zhangsan-github-io便可以访问网页了。"><a href="#在浏览器中输入https-zhangsan-github-io便可以访问网页了。" class="headerlink" title="在浏览器中输入https://zhangsan.github.io便可以访问网页了。"></a>在浏览器中输入<code>https://zhangsan.github.io</code>便可以访问网页了。</h3><p>但是这样建好的网站并不美观，下面我们将会使用Hexo提供的框架对网页仓进行优化</p>
<h2 id="优化GitHub-Pages并对仓库进行管理"><a href="#优化GitHub-Pages并对仓库进行管理" class="headerlink" title="优化GitHub Pages并对仓库进行管理"></a>优化GitHub Pages并对仓库进行管理</h2><p>参考：<a href="https://www.zhihu.com/question/21193762/answer/79109280" target="_blank" rel="noopener">知乎</a>，<a href="https://hexo.io/zh-cn/docs/themes.html" target="_blank" rel="noopener">hexo</a></p>
<h3 id="搭建的流程"><a href="#搭建的流程" class="headerlink" title="搭建的流程"></a>搭建的流程</h3><ol>
<li><p><code>zhangsan.github.io</code>仓创建两个分支：<code>master</code>与<code>hexo</code></p>
</li>
<li><p>设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）</p>
</li>
<li><p>克隆仓库到本地，并且切换到hexo分支</p>
</li>
<li><p>参考<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo</a>安装<code>node</code>和<code>git</code>，在hexo分支上执部署hexo</p>
</li>
<li><p>修改_config.yml中的deploy参数，即将网页文件上传到<code>master</code>上</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: &#39;git&#39;</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;zhangsan&#x2F;zhangsan.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<ol start="7">
<li><p>依次执行<code>git add .</code>，<code>git commit -m &quot;...&quot;</code>，<code>git push origin hexo</code>提交网站相关的文件</p>
</li>
<li><p>执行<code>hexo g</code>，<code>hexo d</code>生成网站并部署到GitHub上</p>
</li>
</ol>
<h3 id="关于日常的改动流程"><a href="#关于日常的改动流程" class="headerlink" title="关于日常的改动流程"></a>关于日常的改动流程</h3><p>在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理。</p>
<ol>
<li><p>依次执行<code>git add .</code>，<code>git commit -m &quot;...&quot;</code>，<code>git push origin hexo</code>将改动推送到GitHub（分支应为hexo）</p>
</li>
<li><p>执行<code>hexo g</code>，<code>hexo d</code>发布网站到master分支上</p>
</li>
</ol>
<h3 id="本地资料丢失后的流程"><a href="#本地资料丢失后的流程" class="headerlink" title="本地资料丢失后的流程"></a>本地资料丢失后的流程</h3><p>当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：</p>
<ol>
<li><p>使用<code>git clone git@github.com:zhangsan/zhangsan.github.io.git</code>拷贝仓库，并切换到<code>hexo</code>分支</p>
</li>
<li><p>在本地克隆下来的文件夹根目录下，依次执行下列指令：<code>npm install hexo</code>，<code>npm install</code>，<code>npm install hexo-deployer-git</code>，（记得，不需要hexo init这条指令）。</p>
</li>
</ol>
<h2 id="next主题设置"><a href="#next主题设置" class="headerlink" title="next主题设置"></a>next主题设置</h2><p>参考：<a href="https://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">next</a></p>
<ul>
<li>在<code>Blogs</code>目录下，输入命令：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next.git themes&#x2F;next</span><br></pre></td></tr></table></figure>

<ul>
<li>打开根目录下的<code>_config.yml</code>文件，将theme字段改为next即可</li>
</ul>
<p><strong>注意：</strong></p>
<ul>
<li><p>项目根目录下的<code>_config.yml</code>文件叫作站点配置文件</p>
</li>
<li><p>主题文件夹根目录下的<code>themes/next/_config.yml</code>文件叫作主题配置文件</p>
</li>
</ul>
<h3 id="给next主题添加-标签-等页面"><a href="#给next主题添加-标签-等页面" class="headerlink" title="给next主题添加[标签]等页面"></a>给next主题添加[标签]等页面</h3><p>新建页面：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd your-hexo-site</span><br><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure>

<p>设置页面类型：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>修改菜单：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F;</span><br><span class="line">  archives: &#x2F;archives</span><br><span class="line">  tags: &#x2F;tags</span><br></pre></td></tr></table></figure>

<p><strong>特别注意：*</strong></p>
<p><code>Menu</code>如果使用了图标，一定要按照下面的格式设置，小心空格</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F;|| home</span><br><span class="line">  #about: &#x2F;about&#x2F;|| user</span><br><span class="line">  tags: &#x2F;tags&#x2F;|| tags</span><br><span class="line">  categories: &#x2F;categories&#x2F;|| th</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网站搭建</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
</search>
